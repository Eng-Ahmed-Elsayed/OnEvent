@model ViewPagedList<EventDto>

@{
    ViewBag.Title = "Event List";
    string searchString = ViewBag.searchString;
    string orderBy = ViewBag.orderBy;
}

<div class="container pt-3">
    <h1>Event List</h1>

    <div class="d-flex justify-content-between">
        <span>
            <a asp-action="Create" class="btn btn-primary">Create New</a>
        </span>
        @* Search *@
        <form asp-action="Index" method="get">
            <div class="input-group mb-3">
                <input type="text"
                       name="searchString"
                       value="@searchString"
                       class="form-control"
                       placeholder="Search for events">
                <div class="input-group-append">
                    <button type="submit" class="btn btn-outline-success">Search</button>
                </div>
            </div>
        </form>
    </div>
    @* Table *@
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index"
                       class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover"
                       asp-route-OrderBy="@(orderBy == "title" ? "title desc" : "title")"
                       asp-route-searchString="@searchString">Title</a>
                </th>
                <th>Description</th>
                <th>
                    <a asp-action="Index"
                       class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover"
                       asp-route-OrderBy="@(orderBy == "date" ? "date desc" : "date")"
                       asp-route-searchString="@searchString">Date</a>
                </th>
                <th>Location</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.items)
            {
                <tr>
                    @{
                        string slicedTitle = item.Title.Length > 10 ? item.Title.Substring(0, 10) + "..." : item.Title;
                        string slicedDescription = item.Description.Length > 15 ? item.Description.Substring(0, 15) + "..." : item.Title;
                    }
                    <td>@slicedTitle</td>
                    <td>@slicedDescription</td>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Location</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info me-3">Details</a>
                        <a href="@Url.Action("Edit", "Events", new { id = item.Id })" class="btn btn-sm btn-success me-3">Edit</a>
                        <button class="btn btn-sm btn-danger"
                                data-bs-toggle="modal"
                                data-bs-target="#confirmationModal">
                            Delete
                        </button>
                        @{
                            await Html.RenderPartialAsync("_Confirmation", new
                            {
                                title = "Delete Event",
                                body = $"Do you want to delete '{slicedDescription}'",
                                controller = "Events",
                                action = "Delete",
                                id = item.Id
                            });
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @* Pagination *@
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @{
                var prevDisabled = !Model.HasPrevious ? "disabled" : "";
                var nextDisabled = !Model.HasNext ? "disabled" : "";
            }
            <li class="page-item @prevDisabled">
                <a class="page-link" asp-action="Index"
                   asp-route-searchString="@searchString"
                   asp-route-orderBy="@orderBy"
                   asp-route-PageNumber="@(Model.CurrentPage - 1)"
                   aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link"
                       asp-action="Index"
                       asp-route-searchString="@searchString"
                       asp-route-orderBy="@orderBy"
                       asp-route-PageNumber="@i">@i</a>
                </li>
            }
            <li class="page-item @nextDisabled">
                <a class="page-link"
                   asp-action="Index"
                   asp-route-searchString="@searchString"
                   asp-route-orderBy="@orderBy"
                   asp-route-PageNumber="@(Model.CurrentPage + 1)"
                   aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>


